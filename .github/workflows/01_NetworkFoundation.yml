name: 01-NetworkFoundation
on:
  workflow_dispatch:
    inputs: 
      subscriptions:
        type: string
        description: The Azure subscription ID to use for the workflow
        required: true
        default: '["connectivity"]'
      environment:
        type: string
        description: The environment to use for the workflow
        required: true
        default: 'connectivity-build'
      regions:
        type: string
        description: The Azure regions to use for the workflow
        required: true
        default: eastus2 # '["eastus2","centralus"]'
      working_directory:
        type: string
        description: The working directory for the Terraform configuration files'
        required: true
        default: './connectivity'
      workload_type:
        type: string
        description: The Azure workload type like connectivity,management, dev,qa,uat,prod
        required: true
        default: 'connectivity' 
      tf_backend_storage_account:
        type: string
        description: The Azure Storage Account to use for the Terraform backend'
        required: true
        default: 'sttfconneastus001'
      tf_backend_resource_group:
        type: string
        description: The Azure Resource Group to use for the Terraform backend'
        required: true
        default: 'rg-tf-backend-connectivity-eastus2-001'
      tf_backend_container: 
        type: string
        description: The Azure Storage Container to use for the Terraform backend'
        required: true
        default: 'tfstate-connectivity-eastus2'
      tf_state_file:
        type: string
        description: The Terraform state file to use for the workflow'
        required: true
        default: 'terraform.tfstate'
      tf_vars_file:
        type: string
        description: The Terraform variables file to use for the workflow'
        required: true
        default: 'connectivity-eastus2.tfvars'

        
permissions:
    contents: read
    id-token: write
    actions: read
    security-events: write

jobs:
    Terraform-lint:
        name: Terraform unit test        
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write
        uses: ./.github/workflows/tflint.yml
        with:
            working_directory: './connectivity'
                   
    Plan_Devlopment:
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write
        needs: Terraform-lint
        uses: ./.github/workflows/tfplan.yml
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'    
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-development.tfstate'
            tf_vars_file: '${{ inputs.workload_type }}-dev-${{ inputs.regions }}.tfvars'            
            
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    Apply_Devlopment:
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write
        uses: ./.github/workflows/tfapply.yml
        needs: Plan_Devlopment
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment:  'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-development.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-dev-${{ inputs.regions }}.tfvars
            
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    Plan_QA:
        needs: Terraform-lint
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write            
        uses: ./.github/workflows/tfplan.yml
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-qa.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-qa-${{ inputs.regions }}.tfvars 
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    Apply_QA:
        needs: [Plan_QA, Apply_Devlopment]
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write  
        uses: ./.github/workflows/tfapply.yml              
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-qa.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-qa-${{ inputs.regions }}.tfvars 
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    Plan_UAT:
        needs: Terraform-lint
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write            
        uses: ./.github/workflows/tfplan.yml
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-uat.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-uat-${{ inputs.regions }}.tfvars 
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    Apply_UAT:
        needs: [Plan_UAT, Apply_QA]
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write  
        uses: ./.github/workflows/tfapply.yml              
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-uat.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-uat-${{ inputs.regions }}.tfvars 
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    Plan_Production:
        name: Terraform Plan for Production
        needs: Terraform-lint
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write            
        uses: ./.github/workflows/tfplan.yml
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-prod.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-prod-${{ inputs.regions }}.tfvars 
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}

    Manual_Approval:
        name: Manual Approval for Production        
        needs:  [Plan_Production, Apply_UAT]
        permissions:
            contents: read
            id-token: write
            actions: read
            issues: write
            security-events: write    
        uses: ./.github/workflows/manualapproval.yml
        with:
           working_directory: './connectivity'
        
    
    Apply_Production:
        name: Terraform Apply for Production
        needs: [ Manual_Approval]
        permissions:
            contents: read
            id-token: write
            actions: read
            security-events: write  
        uses: ./.github/workflows/tfapply.yml              
        with:
            working_directory: './connectivity'
            subscription: 'connectivity'
            regions: ${{ inputs.regions }}
            environment: 'connectivity-build'
            workload_type: 'connectivity'
            tf_backend_storage_account: ${{ inputs.tf_backend_storage_account }}
            tf_backend_resource_group: ${{ inputs.tf_backend_resource_group }}
            tf_backend_container: ${{ inputs.tf_backend_container }}
            tf_state_file: 'foundation-prod.tfstate'
            tf_vars_file: ${{ inputs.workload_type }}-prod-${{ inputs.regions }}.tfvars 
        secrets:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}

    
      